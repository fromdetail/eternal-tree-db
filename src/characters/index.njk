---
layout: base
title: Eternal Tree Database | Characters
---
<div class="container mx-auto">
  <section class="p-4 " x-data="charactersFilter">
    <nav class="mb-8 max-w-2xl mx-auto">
      <div class="flex items-center mb-4">
        <div class="text-lg w-20 mr-2">Rarity</div>
        <div>
          <button class="m-px border text-base font-medium text-black bg-white hover:bg-gray-100 px-4 py-2" 
          x-bind:class="rarities.includes('SP') ? 'bg-gray-100' : ''"
          x-on:click="raritiesFilter('SP')">SP</button>
          <button class="m-px border text-base font-medium text-black bg-white hover:bg-gray-100 px-4 py-2" 
          x-bind:class="rarities.includes('SSR') ? 'bg-gray-100' : ''"
          x-on:click="raritiesFilter('SSR')">SSR</button>
          <button class="m-px border text-base font-medium text-black bg-white hover:bg-gray-100 px-4 py-2" 
          x-bind:class="rarities.includes('SR') ? 'bg-gray-100' : ''"
          x-on:click="raritiesFilter('SR')">SR</button>
          <button class="m-px border text-base font-medium text-black bg-white hover:bg-gray-100 px-4 py-2" 
          x-bind:class="rarities.includes('R') ? 'bg-gray-100' : ''"
          x-on:click="raritiesFilter('R')">R</button>
        </div>
      </div>
      <div class="flex items-center mb-4">
        <div class="text-lg w-20 mr-2">Elements</div>
        <div>
          <button class="m-px border text-base font-medium text-black bg-white hover:bg-gray-100 px-4 py-2" 
          x-bind:class="elements.includes('Water') ? 'bg-gray-100' : ''"
          x-on:click="elementsFilter('Water')">Water</button>
          <button class="m-px border text-base font-medium text-black bg-white hover:bg-gray-100 px-4 py-2" 
          x-bind:class="elements.includes('Fire') ? 'bg-gray-100' : ''"
          x-on:click="elementsFilter('Fire')">Fire</button>
          <button class="m-px border text-base font-medium text-black bg-white hover:bg-gray-100 px-4 py-2" 
          x-bind:class="elements.includes('Wind') ? 'bg-gray-100' : ''"
          x-on:click="elementsFilter('Wind')">Wind</button>
          <button class="m-px border text-base font-medium text-black bg-white hover:bg-gray-100 px-4 py-2" 
          x-bind:class="elements.includes('Earth') ? 'bg-gray-100' : ''"
          x-on:click="elementsFilter('Earth')">Earth</button>
          <button class="m-px border text-base font-medium text-black bg-white hover:bg-gray-100 px-4 py-2" 
          x-bind:class="elements.includes('Light') ? 'bg-gray-100' : ''"
          x-on:click="elementsFilter('Light')">Light</button>
          <button class="m-px border text-base font-medium text-black bg-white hover:bg-gray-100 px-4 py-2" 
          x-bind:class="elements.includes('Dark') ? 'bg-gray-100' : ''"
          x-on:click="elementsFilter('Dark')">Dark</button>
        </div>
      </div>
      <div class="relative">
        <div class="flex absolute inset-y-0 left-0 items-center pl-3 pointer-events-none">
            <svg aria-hidden="true" class="w-5 h-5 text-gray-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path></svg>
        </div>
        <input x-model="search" type="text" class="border border-gray-300 text-gray-900 text-sm focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5" placeholder="Search" required>
      </div>
    </nav>
    <ul class="flex flex-wrap text-center justify-center mx-auto">
      <template x-for="character in filteredCharacters">
        <li class="w-20 grow-0 m-1 overflow-hidden transition ease-in-out hover:scale-125">
          <a class="flex flex-col w-20 h-32 border" :href="character.permalink">
            <div class="bg-white">
              <img class="object-cover h-20 w-20" :src="character.avatar" :alt="character.name">
            </div>
            <p class="text-xs p-1 my-auto" x-text="character.name"></p>
          </a>
        </li>
      </template>
    </ul>
  </section>
</div>

<script>
  const characters = [
    {%- for character in characters -%}
    { permalink: '/characters/{{character.name |slugify}}', character: {{character | dump | safe }}},
    {%- endfor -%}
  ].map(character => {
    return {permalink: character.permalink, ...character.character}
  })

  document.addEventListener('alpine:init', () => {
    Alpine.data('charactersFilter', ()=> ({
      search: '',
      rarities: [],
      elements: [],
      characters: characters,
      get filteredCharacters() {
        let filtered = this.characters
        if (this.rarities.length) {
          filtered = filtered.filter(character => {
            return this.rarities.includes(character.rarity)
          })
        }
        if (this.elements.length) {
          filtered = filtered.filter(character => {
            return this.elements.includes(character.element)
          })
        }
        if (this.search) {
          filtered = filtered.filter(character => {
            return character.name.toLowerCase().includes(this.search.toLowerCase())
          })
        }
        return filtered
      },
      raritiesFilter(rarity) {
        console.log(rarity)
        if (this.rarities.includes(rarity)) {
          this.rarities = this.rarities.filter(rar => {
            return rar != rarity
          })
          return
        }
        this.rarities.push(rarity)
      },
      elementsFilter(element) {
        console.log(element)
        if (this.elements.includes(element)) {
          this.elements = this.elements.filter(ele => {
            return ele != element
          })
          return
        }
        this.elements.push(element)
      }
    }))
  })
</script>